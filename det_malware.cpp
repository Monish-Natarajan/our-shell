#include <bits/stdc++.h>
#include <unistd.h>
#include <dirent.h>
#include <iostream>
#include <fstream>
#include <string>

#define ALERT_LIMIT 50
using namespace std;

int get_heur(pid_t pid);
void enumerate_ancestors(pid_t pid);
int get_cpu_util(pid_t pid);

int main()
{
    pid_t pid; cin >> pid;
    // get_heur(pid);
    enumerate_ancestors(pid);
    // get_cpu_util(pid);
    return 0;
}

void enumerate_ancestors(pid_t pid)
{
    int suggest=1;
    string path,status;
    pid_t ppid,ptid, mlw_pid=-1;
    //ppid -> id of parent process, ptid -> id of controlling terminal

    for(int i=0; i<3; i++)
    {
        //open /proc/[pid]/stat
        path = "/proc/" + to_string(pid) + "/stat";
        ifstream stat_stream(path);
        if (!stat_stream.is_open()) {
        cerr << "Error: failed to open file '" << path << "'" << endl;
        return;
        }

        string line;
        getline(stat_stream, line);
        istringstream line_stream(line);

        for (int i=0; i<7; ++i) {
        if (i == 2) line_stream >> status;
        if (i == 3) line_stream >> ppid;
        if (i == 6) line_stream >> ptid;
        else line_stream.ignore(numeric_limits<streamsize>::max(), ' ');
        }
        // cout << "pid: " << pid << " status : " << status << " ptid : " << ptid << endl;

        if(suggest==1)
        {
            int heur = get_heur(pid);
            cout << "heuristic " << heur << " status " << status << "\n";
            if(heur > ALERT_LIMIT && status=="S") //can replace with diff checker_fn()
            {
                mlw_pid = pid;
            }
        }    
        pid = ppid;
    }
    if(suggest==1){
        if(mlw_pid>0) cout << "Detected Malware PID : " << mlw_pid << "\n";
        else cout << "Malware not found \n";
    }
}

int get_cpu_util(pid_t pid) {
    string line;
    string path = "/proc/" + to_string(pid) + "/stat";
    ifstream stat_stream(path);
    if (!stat_stream.is_open()) {
    cerr << "Error: failed to open file '" << path << "'" << endl;
    }
    getline(stat_stream, line);
    istringstream line_stream(line);

    // The CPU utilization is stored as the 14th and 15th values in the line.
    // The memory utilization is stored as the 22nd value in the line.
    long long utime, stime, start_time, uptime;
    for (int i = 0; i < 23; ++i) {
    if (i == 13) line_stream >> utime;
    else if (i == 14) line_stream >> stime;
    else if (i == 22) {
        line_stream >> start_time;
        //cout << "reading start time " << start_time << "\n";
    }
    else line_stream.ignore(numeric_limits<streamsize>::max(), ' ');
    }

    string path2 = "/proc/uptime";
    ifstream stat_stream2(path2);
    if (!stat_stream2.is_open()) {
    cerr << "Error: failed to open file '" << path2 << "'" << endl;
    }
    getline(stat_stream2, line);
    istringstream line_stream2(line);
    line_stream2 >> uptime;
    uptime *= 100; //converting to clock ticks
    double cpu_util = (stime+utime)*100.0/(uptime-start_time);

    // Print the results.
    // cout << "utime and stime " << utime << " + " << stime << endl;
    // cout << "Start Time: " << start_time << endl;
    // cout << "Uptime: " << uptime << " " << endl;
    // cout << "CPU Utilization: " << cpu_util << "\n";
    return cpu_util;
}

vector <string> list_dir(string path){
    vector <string> list_dirs;
    DIR *d;
    struct dirent *dir;
    d = opendir(path.c_str());
    if (d) {
        while ((dir = readdir(d)) != NULL) {
            list_dirs.push_back(dir->d_name);
        }
        closedir(d);
    }
    return list_dirs;
} 

int get_heur(pid_t pid)
{
    int heur=0, child_util;
    vector <string> list_dirs;
    string path = "/proc/" + to_string(pid) + "/task";
    list_dirs = list_dir(path);
    
    for(int i=0;i<list_dirs.size(); i++)
    {
        if(i==0 || i==1) continue;
        string tid=list_dirs[i];
        // cout << tid << " ";
        path = "/proc/" + to_string(pid) + "/task/" + tid + "/children";
        ifstream stat_stream(path);
        if (!stat_stream.is_open()) {
        cerr << "Error: failed to open file '" << path << "'" << endl;
        return 2;
        }
        string line;
        getline(stat_stream, line);
        istringstream line_stream(line);
        pid_t cpid; 
        
        while(!line_stream.eof())
        {
            line_stream >> cpid;
            if(cpid<=0)continue;
            child_util = get_cpu_util(cpid);
            cout << "child " << cpid << " utilization " << child_util << "%\n";
            heur += child_util;
        }
    }
    return heur;
}